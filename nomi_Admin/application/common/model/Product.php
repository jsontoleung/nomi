<?phpnamespace app\common\model;use think\Model;use app\common\config\Upload;use think\facade\Env;use think\File;/*** 产品模型*/class Product extends Model {	public function proInfo () {					$list = $this			->field('p.pro_id, p.name, p.pro_number, p.price_before, p.price_after, p.photo, p.give_one, p.give_two, p.combo, p.volume, p.buyNum, p.end_time, p.is_member, p.sort, p.is_down, l.level_type, wp.current_cnt')			->alias('p')			->leftJoin('warehouse_product wp', 'p.pro_id = wp.proid')			->leftJoin('user_level l', 'p.level = l.level_id')			->where('p.type=:id', ['id' => 0])			->order('p.sort desc, p.pro_id desc')			->select();		foreach ($list as $k => $v) {						if (empty($v['current_cnt'])) $v['current_cnt'] = 0;			if ($v['end_time'] > 0) $v['end_time'] = date('Y-m-d H:i', $v['end_time']);					}				return $list;	}	/**	 * 保存添加、修改	 */	public function proSave ($data, $file) {		$data['update_time'] = time();		if ($data['end_time'] != 0 || !empty($data['end_time'])) {			$data['end_time'] = strtotime($data['end_time']);		}		if (empty($data['pro_id'])) {			if (!empty($file)) {								// 产品编号[ 1随机--年-2随机-月-3随机-日-1随机-时分秒-2随机 ]				$pro_number = self::randomPro(1) . date('Y') . self::randomPro(2) . date('m') . self::randomPro(3) . date('d') . self::randomPro(1) . date('His') . self::randomPro(2);				// 处理上传图片				$cover = Upload::uploadOne($file, 'product', $data['name']);				$data['photo'] = $cover;				$data['pro_number'] = $pro_number;				$data['create_time'] = time();								if ($this->data($data)->save()) {					return array('status' => 1, 'msg' => '操作成功');				}			}			return array('status' => 0, 'msg' => '请上传图片');		} else {			if (empty($file)) {				unset($data['photo']);			} else {				// 删除原有的图片				$photo = $this->where(['pro_id'=>$data['pro_id']])->value('photo');				$len = substr($photo,0, 5);				if (($len != 'https') || ($len != 'http')) {										if (!empty($photo)) {						$filePath = Env::get('root_path').$photo;						if (is_file($filePath)) {							unlink($filePath);						}					}				}				// 处理上传图片				$cover = Upload::uploadOne($file, 'product', $data['name']);				$data['photo'] = $cover;			}			$save = $this->isUpdate(false)->save($data, ['pro_id'=>$data['pro_id']]);			if ($save) {				return array('status' => 1, 'msg' => '操作成功');			}			return array('status' => 0, 'msg' => '操作失败');		}	}	/**	 * 上传多图片	 */	public function proUpload ($files) {		$photo = Upload::uploadMore($files['image']);		if (isset($files['photo_group']) && !empty($files['photo_group'])) {						// 已有图片多于1张。否则直接赋值添加图片			if (count($files['photo_group']) > 0) {				// 删除多于图片				$former = $this->where(['pro_id'=>$files['pro_id']])->value('photo_group');				$arrs = explode(',', $former);				// 获取数组中不同元素				$result = array_diff($arrs, $files['photo_group']);				if (is_array($result)) {					foreach ($result as $val) {						$len = substr($val,0, 4);						$lens = substr($val,0, 5);						if (($lens != 'https') || ($len != 'http')) {							$filePath[] = Env::get('root_path').$val;							foreach ($filePath as $kk => $vv) {								if (is_file($vv)) {									unlink($vv);								}							}						}					}									}								// 逗号隔开				$str = implode(',', $files['photo_group']);				// 添加图片不为空。否则直接赋值已有图片				if (!empty($photo)) {					// 拼接					$data['photo_group'] = $str . ',' . $photo;				} else {					$data['photo_group'] = $str;				}			} else {				$data['photo_group'] = $photo;			}		} else {			// 删除原有的图片			$former = $this->where(['pro_id'=>$files['pro_id']])->value('photo_group');			$arrs = explode(',', $former);			foreach ($arrs as $k => $v) {				$len = substr($v,0, 4);				$lens = substr($v,0, 5);				if (($lens != 'https') || ($len != 'http')) {					$filePath[] = Env::get('root_path').$v;					foreach ($filePath as $kk => $vv) {						if (is_file($vv)) {							unlink($vv);						}					}				}			}			$data['photo_group'] = $photo;		}		$save = $this->save($data, ['pro_id' => $files['pro_id']]);		if ($save) {			return array('status' => 1, 'msg' => '操作成功');		}		return array('status' => 0, 'msg' => '操作失败');	}	/**	 * 生成产品编号	 */	private static function randomPro($len = 4) {	    $chars = array(	            '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'	        );	    	    $charsLen = count($chars) - 1;	    shuffle($chars); // 将数组打乱	    	    $output = '';	    for($i = 0; $i < $len; $i++){	        $output .= $chars[mt_rand(0, $charsLen)];	    }	    return $output;	}	}